/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.11.1-master-eacca5e
 */
(function(e,f,g){f.module("material.components.progressLinear",["material.core"]).directive("mdProgressLinear",h);function h(q,s,a){var c="determinate",t="indeterminate",r="buffer",d="query";return{restrict:"E",template:'<div class="md-container"><div class="md-dashed"></div><div class="md-bar md-bar1"></div><div class="md-bar md-bar2"></div></div>',compile:b};function b(j,i,k){j.attr("aria-valuemin",0);j.attr("aria-valuemax",100);j.attr("role","progressbar");return p}function p(m,E,C){q(E);var i,F=s.dom.animator.toCss;var A=f.element(E[0].querySelector(".md-bar1")),B=f.element(E[0].querySelector(".md-bar2")),l=f.element(E[0].querySelector(".md-container"));E.attr("md-mode",D());k();j();function j(){C.$observe("value",function(v){var u=o(v);E.attr("aria-valuenow",u);if(D()!=d){n(B,u)}});C.$observe("mdBufferValue",function(u){n(A,o(u))});C.$observe("mdMode",function(u){switch(u){case d:case r:case c:case t:l.removeClass("ng-hide "+i);l.addClass(i="md-mode-"+u);break;default:l.removeClass(i);l.addClass("ng-hide");i=g;break}})}function k(){if(f.isUndefined(C.mdMode)){var u=f.isDefined(C.value);var v=u?c:t;var w="Auto-adding the missing md-mode='{0}' to the ProgressLinear element";a.debug(s.supplant(w,[v]));E.attr("md-mode",v);C.mdMode=v}}function D(){var u=(C.mdMode||"").trim();if(u){switch(u){case c:case t:case r:case d:break;default:u=g;break}}return u}function n(w,x){if(!D()){return}var v=s.supplant("translateX({0}%) scale({1},1)",[(x-100)/2,x/100]);var u=F({transform:v});f.element(w).css(u)}}function o(i){return Math.max(0,Math.min(i||0,100))}}h.$inject=["$mdTheming","$mdUtil","$log"]})(window,window.angular);