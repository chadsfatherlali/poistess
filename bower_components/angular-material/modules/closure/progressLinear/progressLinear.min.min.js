/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.11.1-master-eacca5e
 */
;goog.provide("ng.material.components.progressLinear");goog.require("ng.material.core");angular.module("material.components.progressLinear",["material.core"]).directive("mdProgressLinear",MdProgressLinearDirective);function MdProgressLinearDirective(q,s,k){var m="determinate",t="indeterminate",r="buffer",n="query";return{restrict:"E",template:'<div class="md-container"><div class="md-dashed"></div><div class="md-bar md-bar1"></div><div class="md-bar md-bar2"></div></div>',compile:l};function l(b,a,c){b.attr("aria-valuemin",0);b.attr("aria-valuemax",100);b.attr("role","progressbar");return p}function p(i,c,a){q(c);var e,d=s.dom.animator.toCss;var w=angular.element(c[0].querySelector(".md-bar1")),x=angular.element(c[0].querySelector(".md-bar2")),h=angular.element(c[0].querySelector(".md-container"));c.attr("md-mode",b());g();f();function f(){a.$observe("value",function(u){var v=o(u);c.attr("aria-valuenow",v);if(b()!=n){j(x,v)}});a.$observe("mdBufferValue",function(u){j(w,o(u))});a.$observe("mdMode",function(u){switch(u){case n:case r:case m:case t:h.removeClass("ng-hide "+e);h.addClass(e="md-mode-"+u);break;default:h.removeClass(e);h.addClass("ng-hide");e=undefined;break}})}function g(){if(angular.isUndefined(a.mdMode)){var v=angular.isDefined(a.value);var z=v?m:t;var u="Auto-adding the missing md-mode='{0}' to the ProgressLinear element";k.debug(s.supplant(u,[z]));c.attr("md-mode",z);a.mdMode=z}}function b(){var u=(a.mdMode||"").trim();if(u){switch(u){case m:case t:case r:case n:break;default:u=undefined;break}}return u}function j(B,u){if(!b()){return}var A=s.supplant("translateX({0}%) scale({1},1)",[(u-100)/2,u/100]);var v=d({transform:A});angular.element(B).css(v)}}function o(a){return Math.max(0,Math.min(a||0,100))}}MdProgressLinearDirective.$inject=["$mdTheming","$mdUtil","$log"];ng.material.components.progressLinear=angular.module("material.components.progressLinear");