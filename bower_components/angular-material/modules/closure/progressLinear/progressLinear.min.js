/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.11.2-master-71674b0
 */
;goog.provide("ng.material.components.progressLinear");goog.require("ng.material.core");angular.module("material.components.progressLinear",["material.core"]).directive("mdProgressLinear",MdProgressLinearDirective);function MdProgressLinearDirective(d,b,j){var h="determinate",a="indeterminate",c="buffer",g="query";return{restrict:"E",template:'<div class="md-container"><div class="md-dashed"></div><div class="md-bar md-bar1"></div><div class="md-bar md-bar2"></div></div>',compile:i};function i(l,m,k){l.attr("aria-valuemin",0);l.attr("aria-valuemax",100);l.attr("role","progressbar");return e}function e(v,p,r){d(p);var n,o=b.dom.animator.toCss;var t=angular.element(p[0].querySelector(".md-bar1")),s=angular.element(p[0].querySelector(".md-bar2")),k=angular.element(p[0].querySelector(".md-container"));p.attr("md-mode",q());l();m();function m(){r.$observe("value",function(x){var w=f(x);p.attr("aria-valuenow",w);if(q()!=g){u(s,w)}});r.$observe("mdBufferValue",function(w){u(t,f(w))});r.$observe("mdMode",function(w){switch(w){case g:case c:case h:case a:k.removeClass("ng-hide "+n);k.addClass(n="md-mode-"+w);break;default:k.removeClass(n);k.addClass("ng-hide");n=undefined;break}})}function l(){if(angular.isUndefined(r.mdMode)){var w=angular.isDefined(r.value);var y=w?h:a;var x="Auto-adding the missing md-mode='{0}' to the ProgressLinear element";j.debug(b.supplant(x,[y]));p.attr("md-mode",y);r.mdMode=y}}function q(){var w=(r.mdMode||"").trim();if(w){switch(w){case h:case a:case c:case g:break;default:w=undefined;break}}return w}function u(y,x){if(!q()){return}var z=b.supplant("translateX({0}%) scale({1},1)",[(x-100)/2,x/100]);var w=o({transform:z});angular.element(y).css(w)}}function f(k){return Math.max(0,Math.min(k||0,100))}}MdProgressLinearDirective.$inject=["$mdTheming","$mdUtil","$log"];ng.material.components.progressLinear=angular.module("material.components.progressLinear");