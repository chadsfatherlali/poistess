/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.11.2-master-71674b0
 */
;goog.provide("ng.material.components.menuBar");goog.require("ng.material.components.menu");goog.require("ng.material.core");angular.module("material.components.menuBar",["material.core","material.components.menu"]);angular.module("material.components.menuBar").controller("MenuBarController",MenuBarController);var BOUND_MENU_METHODS=["handleKeyDown","handleMenuHover","scheduleOpenHoveredMenu","cancelScheduledOpen"];function MenuBarController(d,b,a,f,g,h,e){this.$element=b;this.$attrs=a;this.$mdConstant=f;this.$mdUtil=h;this.$document=g;this.$scope=d;this.$timeout=e;var c=this;angular.forEach(BOUND_MENU_METHODS,function(i){c[i]=angular.bind(c,c[i])})}MenuBarController.$inject=["$scope","$element","$attrs","$mdConstant","$document","$mdUtil","$timeout"];MenuBarController.prototype.init=function(){var a=this.$element;var d=this.$mdUtil;var c=this.$scope;var b=this;a.on("keydown",this.handleKeyDown);this.parentToolbar=d.getClosest(a,"MD-TOOLBAR");c.$on("$mdMenuOpen",function(f,e){if(b.getMenus().indexOf(e[0])!=-1){a[0].classList.add("md-open");e[0].classList.add("md-open");b.currentlyOpenMenu=e.controller("mdMenu");b.currentlyOpenMenu.registerContainerProxy(b.handleKeyDown);b.enableOpenOnHover()}});c.$on("$mdMenuClose",function(h,g){var f=b.getMenus();if(f.indexOf(g[0])!=-1){a[0].classList.remove("md-open");g[0].classList.remove("md-open")}if(a[0].contains(g[0])){var e=g[0];while(e&&f.indexOf(e)==-1){e=d.getClosest(e,"MD-MENU",true)}if(e){e.querySelector("button").focus();b.currentlyOpenMenu=undefined;b.disableOpenOnHover();b.setKeyboardMode(true)}}});angular.element(this.getMenus()).on("mouseenter",this.handleMenuHover);this.setKeyboardMode(true)};MenuBarController.prototype.setKeyboardMode=function(a){if(a){this.$element[0].classList.add("md-keyboard-mode")}else{this.$element[0].classList.remove("md-keyboard-mode")}};MenuBarController.prototype.enableOpenOnHover=function(){if(this.openOnHoverEnabled){return}this.openOnHoverEnabled=true;var a=this.$element;var b;if(b=this.parentToolbar){b.dataset.mdRestoreStyle=b.getAttribute("style");b.style.position="relative";b.style.zIndex=100}};MenuBarController.prototype.handleMenuHover=function(a){this.setKeyboardMode(false);if(this.openOnHoverEnabled){this.scheduleOpenHoveredMenu(a)}};MenuBarController.prototype.disableOpenOnHover=function(){if(!this.openOnHoverEnabled){return}this.openOnHoverEnabled=false;var a;if(a=this.parentToolbar){a.setAttribute("style",a.dataset.mdRestoreStyle||"")}};MenuBarController.prototype.scheduleOpenHoveredMenu=function(c){var a=angular.element(c.currentTarget);var b=a.controller("mdMenu");this.setKeyboardMode(false);this.scheduleOpenMenu(b)};MenuBarController.prototype.scheduleOpenMenu=function(c){var a=this;var b=this.$timeout;if(c!=a.currentlyOpenMenu){b.cancel(a.pendingMenuOpen);a.pendingMenuOpen=b(function(){a.pendingMenuOpen=undefined;if(a.currentlyOpenMenu){a.currentlyOpenMenu.close(true,{closeAll:true})}c.open()},200,false)}};MenuBarController.prototype.handleKeyDown=function(h){var b=this.$mdConstant.KEY_CODE;var f=this.currentlyOpenMenu;var d=f&&f.isOpen;this.setKeyboardMode(true);var g;switch(h.keyCode){case b.DOWN_ARROW:if(f){f.focusMenuContainer()}else{this.openFocusedMenu()}g=true;break;case b.UP_ARROW:f&&f.close();g=true;break;case b.LEFT_ARROW:var c=this.focusMenu(-1);if(d){var a=angular.element(c).controller("mdMenu");this.scheduleOpenMenu(a)}g=true;break;case b.RIGHT_ARROW:var c=this.focusMenu(+1);if(d){var a=angular.element(c).controller("mdMenu");this.scheduleOpenMenu(a)}g=true;break}if(g){h&&h.preventDefault&&h.preventDefault();h&&h.stopImmediatePropagation&&h.stopImmediatePropagation()}};MenuBarController.prototype.focusMenu=function(b){var a=this.getMenus();var d=this.getFocusedMenuIndex();if(d==-1){d=this.getOpenMenuIndex()}var c=false;if(d==-1){d=0}else{if(b<0&&d>0||b>0&&d<a.length-b){d+=b;c=true}}if(c){a[d].querySelector("button").focus();return a[d]}};MenuBarController.prototype.openFocusedMenu=function(){var a=this.getFocusedMenu();a&&angular.element(a).controller("mdMenu").open()};MenuBarController.prototype.getMenus=function(){var a=this.$element;return this.$mdUtil.nodesToArray(a[0].children).filter(function(b){return b.nodeName=="MD-MENU"})};MenuBarController.prototype.getFocusedMenu=function(){return this.getMenus()[this.getFocusedMenuIndex()]};MenuBarController.prototype.getFocusedMenuIndex=function(){var d=this.$mdUtil;var a=this.$element;var b=d.getClosest(this.$document[0].activeElement,"MD-MENU");if(!b){return -1}var c=this.getMenus().indexOf(b);return c};MenuBarController.prototype.getOpenMenuIndex=function(){var b=this.getMenus();for(var a=0;a<b.length;++a){if(b[a].classList.contains("md-open")){return a}}return -1};angular.module("material.components.menuBar").directive("mdMenuBar",MenuBarDirective);function MenuBarDirective(c,a){return{restrict:"E",require:"mdMenuBar",controller:"MenuBarController",compile:function b(f,e){if(!e.ariaRole){f[0].setAttribute("role","menubar")}angular.forEach(f[0].children,function(g){if(g.nodeName=="MD-MENU"){if(!g.hasAttribute("md-position-mode")){g.setAttribute("md-position-mode","left bottom")}g.setAttribute("role","menu");var h=c.nodesToArray(g.querySelectorAll("md-menu-content"));angular.forEach(h,function(i){i.classList.add("md-menu-bar-menu");i.classList.add("md-dense");if(!i.hasAttribute("width")){i.setAttribute("width",5)}})}});return function d(i,h,g,j){a(i,h);j.init()}}}}MenuBarDirective.$inject=["$mdUtil","$mdTheming"];angular.module("material.components.menuBar").directive("mdMenuDivider",MenuDividerDirective);function MenuDividerDirective(){return{restrict:"E",compile:function(b,a){if(!a.role){b[0].setAttribute("role","separator")}}}}angular.module("material.components.menuBar").controller("MenuItemController",MenuItemController);function MenuItemController(c,b,a){this.$element=b;this.$attrs=a;this.$scope=c}MenuItemController.$inject=["$scope","$element","$attrs"];MenuItemController.prototype.init=function(c){var b=this.$element;var a=this.$attrs;this.ngModel=c;if(a.type=="checkbox"||a.type=="radio"){this.mode=a.type;this.iconEl=b[0].children[0];this.buttonEl=b[0].children[1];if(c){this.initClickListeners()}}};MenuItemController.prototype.initClickListeners=function(){var c=this.ngModel;var j=this.$scope;var i=this.$attrs;var k=this.$element;var e=this.mode;this.handleClick=angular.bind(this,this.handleClick);var h=this.iconEl;var d=angular.element(this.buttonEl);var f=this.handleClick;i.$observe("disabled",g);g(i.disabled);c.$render=function b(){if(a()){h.style.display="";k.attr("aria-checked","true")}else{h.style.display="none";k.attr("aria-checked","false")}};j.$$postDigest(c.$render);function a(){if(e=="radio"){var l=i.ngValue?j.$eval(i.ngValue):i.value;return c.$modelValue==l}else{return c.$modelValue}}function g(l){if(l){d.off("click",f)}else{d.on("click",f)}}};MenuItemController.prototype.handleClick=function(c){var f=this.mode;var d=this.ngModel;var a=this.$attrs;var b;if(f=="checkbox"){b=!d.$modelValue}else{if(f=="radio"){b=a.ngValue?this.$scope.$eval(a.ngValue):a.value}}d.$setViewValue(b);d.$render()};angular.module("material.components.menuBar").directive("mdMenuItem",MenuItemDirective);function MenuItemDirective(){return{require:["mdMenuItem","?ngModel"],compile:function(f,d){if(d.type=="checkbox"||d.type=="radio"){var e=f[0].textContent;var a=angular.element('<md-button type="button"></md-button>');a.html(e);a.attr("tabindex","0");f.html("");f.append(angular.element('<md-icon md-svg-icon="check"></md-icon>'));f.append(a);f[0].classList.add("md-indent");b("role",(d.type=="checkbox")?"menuitemcheckbox":"menuitemradio");angular.forEach(["ng-disabled"],c)}else{b("role","menuitem")}return function(j,i,h,g){var k=g[0];var l=g[1];k.init(l)};function b(g,h){if(!f[0].hasAttribute(g)){f[0].setAttribute(g,h)}}function c(g){if(f[0].hasAttribute(g)){var h=f[0].getAttribute(g);a[0].setAttribute(g,h);f[0].removeAttribute(g)}}},controller:"MenuItemController"}}ng.material.components.menuBar=angular.module("material.components.menuBar");