/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.11.1-master-eacca5e
 */
;function MenuBarController(h,f,k,g,j,d,c){this.$element=f,this.$attrs=k,this.$mdConstant=g,this.$mdUtil=d,this.$document=j,this.$scope=h,this.$timeout=c;var b=this;angular.forEach(BOUND_MENU_METHODS,function(a){b[a]=angular.bind(b,b[a])})}function MenuBarDirective(b,a){return{restrict:"E",require:"mdMenuBar",controller:"MenuBarController",compile:function(d,c){return c.ariaRole||d[0].setAttribute("role","menubar"),angular.forEach(d[0].children,function(e){if("MD-MENU"==e.nodeName){e.hasAttribute("md-position-mode")||e.setAttribute("md-position-mode","left bottom"),e.setAttribute("role","menu");var f=b.nodesToArray(e.querySelectorAll("md-menu-content"));angular.forEach(f,function(g){g.classList.add("md-menu-bar-menu"),g.classList.add("md-dense"),g.hasAttribute("width")||g.setAttribute("width",5)})}}),function(g,i,f,h){a(g,i),h.init()}}}}function MenuDividerDirective(){return{restrict:"E",compile:function(b,a){a.role||b[0].setAttribute("role","separator")}}}function MenuItemController(b,a,c){this.$element=a,this.$attrs=c,this.$scope=b}function MenuItemDirective(){return{require:["mdMenuItem","?ngModel"],compile:function(d,b){function g(e,h){d[0].hasAttribute(e)||d[0].setAttribute(e,h)}function c(e){if(d[0].hasAttribute(e)){var h=d[0].getAttribute(e);a[0].setAttribute(e,h),d[0].removeAttribute(e)}}if("checkbox"==b.type||"radio"==b.type){var f=d[0].textContent,a=angular.element('<md-button type="button"></md-button>');a.html(f),a.attr("tabindex","0"),d.html(""),d.append(angular.element('<md-icon md-svg-icon="check"></md-icon>')),d.append(a),d[0].classList.add("md-indent"),g("role","checkbox"==b.type?"menuitemcheckbox":"menuitemradio"),angular.forEach(["ng-disabled"],c)}else{g("role","menuitem")}return function(l,j,p,k){var m=k[0],h=k[1];m.init(h)}},controller:"MenuItemController"}}goog.provide("ng.material.components.menuBar"),goog.require("ng.material.components.menu"),goog.require("ng.material.core"),angular.module("material.components.menuBar",["material.core","material.components.menu"]),angular.module("material.components.menuBar").controller("MenuBarController",MenuBarController);var BOUND_MENU_METHODS=["handleKeyDown","handleMenuHover","scheduleOpenHoveredMenu","cancelScheduledOpen"];MenuBarController.$inject=["$scope","$element","$attrs","$mdConstant","$document","$mdUtil","$timeout"],MenuBarController.prototype.init=function(){var c=this.$element,a=this.$mdUtil,d=this.$scope,b=this;c.on("keydown",this.handleKeyDown),this.parentToolbar=a.getClosest(c,"MD-TOOLBAR"),d.$on("$mdMenuOpen",function(e,f){-1!=b.getMenus().indexOf(f[0])&&(c[0].classList.add("md-open"),f[0].classList.add("md-open"),b.currentlyOpenMenu=f.controller("mdMenu"),b.currentlyOpenMenu.registerContainerProxy(b.handleKeyDown),b.enableOpenOnHover())}),d.$on("$mdMenuClose",function(h,g){var f=b.getMenus();if(-1!=f.indexOf(g[0])&&(c[0].classList.remove("md-open"),g[0].classList.remove("md-open")),c[0].contains(g[0])){for(var e=g[0];e&&-1==f.indexOf(e);){e=a.getClosest(e,"MD-MENU",!0)}e&&(e.querySelector("button").focus(),b.currentlyOpenMenu=void 0,b.disableOpenOnHover(),b.setKeyboardMode(!0))}}),angular.element(this.getMenus()).on("mouseenter",this.handleMenuHover),this.setKeyboardMode(!0)},MenuBarController.prototype.setKeyboardMode=function(a){a?this.$element[0].classList.add("md-keyboard-mode"):this.$element[0].classList.remove("md-keyboard-mode")},MenuBarController.prototype.enableOpenOnHover=function(){if(!this.openOnHoverEnabled){this.openOnHoverEnabled=!0;var a;this.$element;(a=this.parentToolbar)&&(a.dataset.mdRestoreStyle=a.getAttribute("style"),a.style.position="relative",a.style.zIndex=100)}},MenuBarController.prototype.handleMenuHover=function(a){this.setKeyboardMode(!1),this.openOnHoverEnabled&&this.scheduleOpenHoveredMenu(a)},MenuBarController.prototype.disableOpenOnHover=function(){if(this.openOnHoverEnabled){this.openOnHoverEnabled=!1;var a;(a=this.parentToolbar)&&a.setAttribute("style",a.dataset.mdRestoreStyle||"")}},MenuBarController.prototype.scheduleOpenHoveredMenu=function(b){var a=angular.element(b.currentTarget),c=a.controller("mdMenu");this.setKeyboardMode(!1),this.scheduleOpenMenu(c)},MenuBarController.prototype.scheduleOpenMenu=function(b){var a=this,c=this.$timeout;b!=a.currentlyOpenMenu&&(c.cancel(a.pendingMenuOpen),a.pendingMenuOpen=c(function(){a.pendingMenuOpen=void 0,a.currentlyOpenMenu&&a.currentlyOpenMenu.close(!0,{closeAll:!0}),b.open()},200,!1))},MenuBarController.prototype.handleKeyDown=function(f){var c=this.$mdConstant.KEY_CODE,h=this.currentlyOpenMenu,d=h&&h.isOpen;this.setKeyboardMode(!0);var g;switch(f.keyCode){case c.DOWN_ARROW:h?h.focusMenuContainer():this.openFocusedMenu(),g=!0;break;case c.UP_ARROW:h&&h.close(),g=!0;break;case c.LEFT_ARROW:var b=this.focusMenu(-1);if(d){var a=angular.element(b).controller("mdMenu");this.scheduleOpenMenu(a)}g=!0;break;case c.RIGHT_ARROW:var b=this.focusMenu(1);if(d){var a=angular.element(b).controller("mdMenu");this.scheduleOpenMenu(a)}g=!0}g&&(f&&f.preventDefault&&f.preventDefault(),f&&f.stopImmediatePropagation&&f.stopImmediatePropagation())},MenuBarController.prototype.focusMenu=function(c){var a=this.getMenus(),d=this.getFocusedMenuIndex();-1==d&&(d=this.getOpenMenuIndex());var b=!1;return -1==d?d=0:(0>c&&d>0||c>0&&d<a.length-c)&&(d+=c,b=!0),b?(a[d].querySelector("button").focus(),a[d]):void 0},MenuBarController.prototype.openFocusedMenu=function(){var a=this.getFocusedMenu();a&&angular.element(a).controller("mdMenu").open()},MenuBarController.prototype.getMenus=function(){var a=this.$element;return this.$mdUtil.nodesToArray(a[0].children).filter(function(b){return"MD-MENU"==b.nodeName})},MenuBarController.prototype.getFocusedMenu=function(){return this.getMenus()[this.getFocusedMenuIndex()]},MenuBarController.prototype.getFocusedMenuIndex=function(){var b=this.$mdUtil,a=(this.$element,b.getClosest(this.$document[0].activeElement,"MD-MENU"));if(!a){return -1}var c=this.getMenus().indexOf(a);return c},MenuBarController.prototype.getOpenMenuIndex=function(){for(var b=this.getMenus(),a=0;a<b.length;++a){if(b[a].classList.contains("md-open")){return a}}return -1},angular.module("material.components.menuBar").directive("mdMenuBar",MenuBarDirective),MenuBarDirective.$inject=["$mdUtil","$mdTheming"],angular.module("material.components.menuBar").directive("mdMenuDivider",MenuDividerDirective),angular.module("material.components.menuBar").controller("MenuItemController",MenuItemController),MenuItemController.$inject=["$scope","$element","$attrs"],MenuItemController.prototype.init=function(b){var a=this.$element,c=this.$attrs;this.ngModel=b,("checkbox"==c.type||"radio"==c.type)&&(this.mode=c.type,this.iconEl=a[0].children[0],this.buttonEl=a[0].children[1],b&&this.initClickListeners())},MenuItemController.prototype.initClickListeners=function(){function h(){if("radio"==f){var a=c.ngValue?b.$eval(c.ngValue):c.value;return d.$modelValue==a}return d.$modelValue}function m(a){a?k.off("click",p):k.on("click",p)}var d=this.ngModel,b=this.$scope,c=this.$attrs,g=this.$element,f=this.mode;this.handleClick=angular.bind(this,this.handleClick);var j=this.iconEl,k=angular.element(this.buttonEl),p=this.handleClick;c.$observe("disabled",m),m(c.disabled),d.$render=function(){h()?(j.style.display="",g.attr("aria-checked","true")):(j.style.display="none",g.attr("aria-checked","false"))},b.$$postDigest(d.$render)},MenuItemController.prototype.handleClick=function(c){var a,f=this.mode,b=this.ngModel,d=this.$attrs;"checkbox"==f?a=!b.$modelValue:"radio"==f&&(a=d.ngValue?this.$scope.$eval(d.ngValue):d.value),b.$setViewValue(a),b.$render()},angular.module("material.components.menuBar").directive("mdMenuItem",MenuItemDirective),ng.material.components.menuBar=angular.module("material.components.menuBar");