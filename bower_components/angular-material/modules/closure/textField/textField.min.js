/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.9.0-rc1-master-3c0ce9b
 */
;goog.provide("ng.material.components.textField");goog.require("ng.material.core");(function(){ng.material.components.textField=angular.module("material.components.textField",["material.core"]).directive("mdInputGroup",a).directive("mdInput",c).directive("mdTextFloat",b);function b(e,g,d,f){return{restrict:"E",replace:true,scope:{fid:"@?mdFid",label:"@?",value:"=ngModel"},compile:function(i,h){f.warn("<md-text-float> is deprecated. Please use `<md-input-container>` and `<input>`.More information at http://material.angularjs.org/#/api/material.components.input/directive/mdInputContainer");if(angular.isUndefined(h.mdFid)){h.mdFid=g.nextUid()}return{pre:function(m,l,k){var j=d(k.ngDisabled);m.isDisabled=function(){return j(m.$parent)};m.inputType=k.type||"text"},post:e}},template:'<md-input-group tabindex="-1"> <label for="{{fid}}" >{{label}}</label> <md-input id="{{fid}}" ng-disabled="isDisabled()" ng-model="value" type="{{inputType}}"></md-input></md-input-group>'}}b.$inject=["$mdTheming","$mdUtil","$parse","$log"];function a(d){return{restrict:"CE",controller:["$element",function(e){d.warn("<md-input-group> is deprecated. Please use `<md-input-container>` and `<input>`.More information at http://material.angularjs.org/#/api/material.components.input/directive/mdInputContainer");this.setFocused=function(f){e.toggleClass("md-input-focused",!!f)};this.setHasValue=function(f){e.toggleClass("md-input-has-value",f)}}]}}a.$inject=["$log"];function c(e,d){return{restrict:"E",replace:true,template:"<input >",require:["^?mdInputGroup","?ngModel"],link:function(k,j,g,f){if(!f[0]){return}d.warn("<md-input> is deprecated. Please use `<md-input-container>` and `<input>`.More information at http://material.angularjs.org/#/api/material.components.input/directive/mdInputContainer");var l=f[0];var h=f[1];k.$watch(k.isDisabled,function(m){j.attr("aria-disabled",!!m);j.attr("tabindex",!!m)});j.attr("type",g.type||j.parent().attr("type")||"text");if(h){h.$formatters.push(function(m){l.setHasValue(i(m));return m})}j.on("input",function(){l.setHasValue(i())}).on("focus",function(m){l.setFocused(true)}).on("blur",function(m){l.setFocused(false);l.setHasValue(i())});k.$on("$destroy",function(){l.setFocused(false);l.setHasValue(false)});function i(m){m=angular.isUndefined(m)?j.val():m;return(angular.isDefined(m)&&(m!==null)&&(m.toString().trim()!==""))}}}}c.$inject=["$mdUtil","$log"]})();